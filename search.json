[{"title":"Hello World","path":"/2023/09/05/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for moreinfo. If you get any problems when using Hexo, you can find the answerin troubleshooting or you can ask meon GitHub. Quick StartCreate a new post1hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"},{"title":"Linux安装JDK","path":"/2023/08/31/Linux安装JDK/","content":"1、CentOS安装JDK jdk1.8下载地址：https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html jdk11下载地址：https://www.oracle.com/java/technologies/javase-jdk11-downloads.html jdk14下载地址：https://www.oracle.com/java/technologies/javase-jdk14-downloads.html A、方式一（rpm方式）12345678910#需要提前下载好rpm包#安装之前检测jdk是否安装rpm -qa | grep java#执行安装rpm -ivh jdk-8u251-linux-x64.rpm #检测jdk版本java -version B、方式二（压缩包）1234567891011121314151617181920212223242526272829303132333435363738394041#需要提前下载好jdk-8u251-linux-x64.tar.gztar -zvxf jdk-8u251-linux-x64.tar.gz#配置环境变量sudo vi /etc/profile#将一下配置添加到文件末尾（注意JAVA_HOME的位置）#javaexport JAVA_HOME=/usr/java/jdk1.8.0_181export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/libsudo tee /etc/profile &lt;&lt;-&#x27;EOF&#x27;export JAVA_HOME=/home/yongzheng/application/jdk/jdk1.8.0_301export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/libexport M2_HOME=/home/yongzheng/application/mavenexport PATH=$PATH:$M2_HOME/binEOF#重新加载配置source /etc/profile#验证码java -version#MACsudo tee ~/.bash_profile &lt;&lt;-&#x27;EOF&#x27;export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_333.jdk/Contents/Homeexport M2_HOME=/Library/Java/Maven/apache-maven-3.8.6export GRADLE_HOME=/Library/Java/Gradle/gradle-7.4.2export GRADLE_USER_HOME=/Library/Java/Repositoryexport PATH=$JAVA_HOME/bin:$M2_HOME/bin:$GRADLE_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/libEOF C、方式三（yum）123456789101112131415161718192021222324252627282930313233343536373839404142#搜索jdk安装包yum search java|grep jdk#搜索jdk 1.8.0版本yum search java|grep jdk | grep 1.8.0Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fastjava-1.8.0-openjdk.i686 : OpenJDK Runtime Environment 8java-1.8.0-openjdk.x86_64 : OpenJDK Runtime Environment 8java-1.8.0-openjdk-accessibility.i686 : OpenJDK accessibility connectorjava-1.8.0-openjdk-accessibility.x86_64 : OpenJDK accessibility connectorjava-1.8.0-openjdk-accessibility-debug.i686 : OpenJDK 8 accessibility connectorjava-1.8.0-openjdk-accessibility-debug.x86_64 : OpenJDK 8 accessibilityjava-1.8.0-openjdk-debug.i686 : OpenJDK Runtime Environment 8 with full debug onjava-1.8.0-openjdk-debug.x86_64 : OpenJDK Runtime Environment 8 with full debugjava-1.8.0-openjdk-demo.i686 : OpenJDK Demos 8java-1.8.0-openjdk-demo.x86_64 : OpenJDK Demos 8java-1.8.0-openjdk-demo-debug.i686 : OpenJDK Demos 8 with full debug onjava-1.8.0-openjdk-demo-debug.x86_64 : OpenJDK Demos 8 with full debug onjava-1.8.0-openjdk-devel.i686 : OpenJDK Development Environment 8java-1.8.0-openjdk-devel.x86_64 : OpenJDK Development Environment 8java-1.8.0-openjdk-devel-debug.i686 : OpenJDK Development Environment 8 withjava-1.8.0-openjdk-devel-debug.x86_64 : OpenJDK Development Environment 8 withjava-1.8.0-openjdk-headless.i686 : OpenJDK Headless Runtime Environment 8java-1.8.0-openjdk-headless.x86_64 : OpenJDK Headless Runtime Environment 8java-1.8.0-openjdk-headless-debug.i686 : OpenJDK Runtime Environment with fulljava-1.8.0-openjdk-headless-debug.x86_64 : OpenJDK Runtime Environment with fulljava-1.8.0-openjdk-javadoc.noarch : OpenJDK 8 API documentationjava-1.8.0-openjdk-javadoc-debug.noarch : OpenJDK 8 API documentation forjava-1.8.0-openjdk-javadoc-zip.noarch : OpenJDK 8 API documentation compressedjava-1.8.0-openjdk-javadoc-zip-debug.noarch : OpenJDK 8 API documentationjava-1.8.0-openjdk-src.i686 : OpenJDK Source Bundle 8java-1.8.0-openjdk-src.x86_64 : OpenJDK Source Bundle 8java-1.8.0-openjdk-src-debug.i686 : OpenJDK Source Bundle 8 for packages withjava-1.8.0-openjdk-src-debug.x86_64 : OpenJDK Source Bundle 8 for packages with#安装下载jdk1.8，下载之后默认的目录为： /usr/lib/jvm/yum install java-1.8.0-openjdk#验证码java -version 2、Ubuntu安装JDKA、方式一12345678#搜索可用jdk列表sudo apt search openjdk-8#安装jdksudo apt-get install openjdk-8-jdk#验证码java -version B、方式二（压缩包）123456789101112131415161718#需要提前下载好jdk-8u251-linux-x64.tar.gztar -zvxf jdk-8u251-linux-x64.tar.gz#配置环境变量sudo vi /etc/profile#将一下配置添加到文件末尾（注意JAVA_HOME的位置）#javaexport JAVA_HOME=/usr/java/jdk1.8.0_181export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib#重新加载配置source /etc/profile#验证码java -version","tags":["Linux","JDK"],"categories":["Linux"]},{"title":"Linux工具安装","path":"/2023/08/31/Linux工具安装/","content":"1、lrzsz工具（上传下载）123456789#Ubuntu下载安装包sudo apt-get install -y lrzsz#CentOS下载安装包yum install -y lrzsz#上传文件rz#下载文件sz 文件名 2、sftp工具（上传下载）1234567891011121314151617181920212223#Xshell的sftp工具#查看服务器的位置pwd#查看本机的位置lpwd#固定本机的位置lcd#上传文件 或直接put 使用文件弹出框上传#将本机lcd默认路径下的abc.txt 上传到服务器现在的位置put abc.txt#上传多个文件mput *.txt#下载文件#将服务器现在位置的abc.txt文件，下载到lcd默认的本机的位置get abc.txt #下载多个mget *.txt 3、openssh-server工具（ssh远程）1234567# Xshell无法SSH连接Ubuntu #下载ssh服务sudo apt-get install openssh-server# 查看Ubuntu是否开启22端口netstat -ntlp | grep 22#检测端口是否开启telnet 192.168.3.244 22 4、sshpass工具（ssh远程）1234567891011121314151617181920212223242526272829303132333435363738394041# 安装软件包sudo apt-get install sshpass# 直接远程Linux主机# sshpass -p password ssh -p port username@IP 默认22端口sshpass -p xxx ssh root@192.168.11.11#从密码文件读取文件内容作为密码去远程连接主机sshpass -f xxx.txt ssh root@192.168.11.11#从远程主机上拉取文件到本地sshpass -p &#123;密码&#125; scp &#123;用户名&#125;@&#123;主机IP&#125;:$&#123;远程主机目录&#125; $&#123;本地主机目录&#125;#将主机目录文件拷贝至远程主机目录sshpass -p &#123;密码&#125; scp $&#123;本地主机目录&#125; &#123;用户名&#125;@&#123;主机IP&#125;:$&#123;远程主机目录&#125; #远程执行命令sshpass -p password ssh username@host &lt;cmd&gt;sshpass：用于非交互的ssh 密码验证使用 -p 参数指定明文密码，然后直接登录远程服务器。 它支持密码从命令行,文件,环境变量中读取1、从命令行方式传递密码sshpass -p user_password ssh user_name@192.168.1.2 【登录远程机器】sshpass -p user_password scp -P22 root@192.168.1.2:/home/test ./ 【远程机器/home/test 复制到本机当前目录】还可以加参数 -q 【去掉进度显示】2、从文件读取密码echo &quot;user_password&quot; &gt; user.passwdsshpass -f user.passwd ssh user_name@192.168.1.23、从环境变量获取密码export SSHPASS=&quot;user_password&quot;sshpass -e ssh user_name@192.168.1.2 4、sshpass -p user_password ssh -o StrictHostKeyChecking=no user_name@192.168.1.2 【-o StrictHostKeyChecking=no 表示远程连接时不提示是否输入yes/no】5、使用sshpass远程免密，在远程主机上执行shell命令，如下远程执行命令：touch /opt/file.txtsshpass -p user_password ssh -o StrictHostKeyChecking=no user_name@192.168.1.2 touch /opt/file.txt[注：shell命令要和sshpass命令写在一行] 5、ufw防火墙12345678910111213141516171819202122232425#安装防火墙sudo apt-get install ufw#防火墙开启sudo ufw enable#防火墙重启sudo ufw reload#关闭防火墙sudo ufw disable#开放22端口sudo ufw allow 22#禁用22端口sudo ufw delete allow 22#查看端口开启状态sudo ufw status#允许此IP访问所有的本机端口sudo ufw allow from 192.168.3.135#禁止外部访问SMTP服务sudo ufw deny smtp#删除上面建立的某条规则sudo ufw delete allow smtp #推荐使用sudo apt-get install ufwsudo ufw enablesudo ufw default deny 6.定时任务 12345678910111213141516171819202122232425#安装定时工具yum install cronie#启动服务service crond start #重启服务service crond restart #关闭服务service crond stop #重新加载服务service crond reload #查看状态service crond status 0 0 6 * * ? true &gt; /var/log/nginx/access.log0 0 6 * * ? true &gt; /var/log/nginx/error.log:wq #保存# 编辑定时命令 出发vim编辑器crontab -e#查看当前所有定时任务crontab -l#删除当前所有定时任务crontab -r","tags":["Linux"],"categories":["Linux"]},{"title":"Linux工具安装","path":"/notes/Linux工具安装.html","content":"1、lrzsz工具（上传下载）123456789#Ubuntu下载安装包sudo apt-get install -y lrzsz#CentOS下载安装包yum install -y lrzsz#上传文件rz#下载文件sz 文件名 2、sftp工具（上传下载）1234567891011121314151617181920212223#Xshell的sftp工具#查看服务器的位置pwd#查看本机的位置lpwd#固定本机的位置lcd#上传文件 或直接put 使用文件弹出框上传#将本机lcd默认路径下的abc.txt 上传到服务器现在的位置put abc.txt#上传多个文件mput *.txt#下载文件#将服务器现在位置的abc.txt文件，下载到lcd默认的本机的位置get abc.txt #下载多个mget *.txt 3、openssh-server工具（ssh远程）1234567# Xshell无法SSH连接Ubuntu #下载ssh服务sudo apt-get install openssh-server# 查看Ubuntu是否开启22端口netstat -ntlp | grep 22#检测端口是否开启telnet 192.168.3.244 22 4、sshpass工具（ssh远程）123456789101112131415161718192021222324252627282930313233343536373839404142# 安装软件包sudo apt-get install sshpass# 直接远程Linux主机# sshpass -p password ssh -p port username@IP 默认22端口sshpass -p xxx ssh root@192.168.11.11#从密码文件读取文件内容作为密码去远程连接主机sshpass -f xxx.txt ssh root@192.168.11.11#从远程主机上拉取文件到本地sshpass -p &#123;密码&#125; scp &#123;用户名&#125;@&#123;主机IP&#125;:$&#123;远程主机目录&#125; $&#123;本地主机目录&#125;#将主机目录文件拷贝至远程主机目录sshpass -p &#123;密码&#125; scp $&#123;本地主机目录&#125; &#123;用户名&#125;@&#123;主机IP&#125;:$&#123;远程主机目录&#125; #远程执行命令sshpass -p password ssh username@host &lt;cmd&gt;sshpass：用于非交互的ssh 密码验证使用 -p 参数指定明文密码，然后直接登录远程服务器。 它支持密码从命令行,文件,环境变量中读取1、从命令行方式传递密码sshpass -p user_password ssh user_name@192.168.1.2 【登录远程机器】sshpass -p user_password scp -P22 root@192.168.1.2:/home/test ./ 【远程机器/home/test 复制到本机当前目录】还可以加参数 -q 【去掉进度显示】2、从文件读取密码echo &quot;user_password&quot; &gt; user.passwdsshpass -f user.passwd ssh user_name@192.168.1.23、从环境变量获取密码export SSHPASS=&quot;user_password&quot;sshpass -e ssh user_name@192.168.1.2 4、sshpass -p user_password ssh -o StrictHostKeyChecking=no user_name@192.168.1.2 【-o StrictHostKeyChecking=no 表示远程连接时不提示是否输入yes/no】5、使用sshpass远程免密，在远程主机上执行shell命令，如下远程执行命令：touch /opt/file.txtsshpass -p user_password ssh -o StrictHostKeyChecking=no user_name@192.168.1.2 touch /opt/file.txt[注：shell命令要和sshpass命令写在一行] 5、ufw防火墙12345678910111213141516171819202122232425#安装防火墙sudo apt-get install ufw#防火墙开启sudo ufw enable#防火墙重启sudo ufw reload#关闭防火墙sudo ufw disable#开放22端口sudo ufw allow 22#禁用22端口sudo ufw delete allow 22#查看端口开启状态sudo ufw status#允许此IP访问所有的本机端口sudo ufw allow from 192.168.3.135#禁止外部访问SMTP服务sudo ufw deny smtp#删除上面建立的某条规则sudo ufw delete allow smtp #推荐使用sudo apt-get install ufwsudo ufw enablesudo ufw default deny 6.定时任务 12345678910111213141516171819202122232425#安装定时工具yum install cronie#启动服务service crond start #重启服务service crond restart #关闭服务service crond stop #重新加载服务service crond reload #查看状态service crond status 0 0 6 * * ? true &gt; /var/log/nginx/access.log0 0 6 * * ? true &gt; /var/log/nginx/error.log:wq #保存# 编辑定时命令 出发vim编辑器crontab -e#查看当前所有定时任务crontab -l#删除当前所有定时任务crontab -r"},{"title":"Linux安装JDK","path":"/notes/Linux安装JDK.html","content":"1、CentOS安装JDK jdk1.8下载地址：https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html jdk11下载地址：https://www.oracle.com/java/technologies/javase-jdk11-downloads.html jdk14下载地址：https://www.oracle.com/java/technologies/javase-jdk14-downloads.html A、方式一（rpm方式）12345678910#需要提前下载好rpm包#安装之前检测jdk是否安装rpm -qa | grep java#执行安装rpm -ivh jdk-8u251-linux-x64.rpm #检测jdk版本java -version B、方式二（压缩包）1234567891011121314151617181920212223242526272829303132333435363738394041#需要提前下载好jdk-8u251-linux-x64.tar.gztar -zvxf jdk-8u251-linux-x64.tar.gz#配置环境变量sudo vi /etc/profile#将一下配置添加到文件末尾（注意JAVA_HOME的位置）#javaexport JAVA_HOME=/usr/java/jdk1.8.0_181export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/libsudo tee /etc/profile &lt;&lt;-&#x27;EOF&#x27;export JAVA_HOME=/home/yongzheng/application/jdk/jdk1.8.0_301export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/libexport M2_HOME=/home/yongzheng/application/mavenexport PATH=$PATH:$M2_HOME/binEOF#重新加载配置source /etc/profile#验证码java -version#MACsudo tee ~/.bash_profile &lt;&lt;-&#x27;EOF&#x27;export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_333.jdk/Contents/Homeexport M2_HOME=/Library/Java/Maven/apache-maven-3.8.6export GRADLE_HOME=/Library/Java/Gradle/gradle-7.4.2export GRADLE_USER_HOME=/Library/Java/Repositoryexport PATH=$JAVA_HOME/bin:$M2_HOME/bin:$GRADLE_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/libEOF C、方式三（yum）123456789101112131415161718192021222324252627282930313233343536373839404142#搜索jdk安装包yum search java|grep jdk#搜索jdk 1.8.0版本yum search java|grep jdk | grep 1.8.0Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fastjava-1.8.0-openjdk.i686 : OpenJDK Runtime Environment 8java-1.8.0-openjdk.x86_64 : OpenJDK Runtime Environment 8java-1.8.0-openjdk-accessibility.i686 : OpenJDK accessibility connectorjava-1.8.0-openjdk-accessibility.x86_64 : OpenJDK accessibility connectorjava-1.8.0-openjdk-accessibility-debug.i686 : OpenJDK 8 accessibility connectorjava-1.8.0-openjdk-accessibility-debug.x86_64 : OpenJDK 8 accessibilityjava-1.8.0-openjdk-debug.i686 : OpenJDK Runtime Environment 8 with full debug onjava-1.8.0-openjdk-debug.x86_64 : OpenJDK Runtime Environment 8 with full debugjava-1.8.0-openjdk-demo.i686 : OpenJDK Demos 8java-1.8.0-openjdk-demo.x86_64 : OpenJDK Demos 8java-1.8.0-openjdk-demo-debug.i686 : OpenJDK Demos 8 with full debug onjava-1.8.0-openjdk-demo-debug.x86_64 : OpenJDK Demos 8 with full debug onjava-1.8.0-openjdk-devel.i686 : OpenJDK Development Environment 8java-1.8.0-openjdk-devel.x86_64 : OpenJDK Development Environment 8java-1.8.0-openjdk-devel-debug.i686 : OpenJDK Development Environment 8 withjava-1.8.0-openjdk-devel-debug.x86_64 : OpenJDK Development Environment 8 withjava-1.8.0-openjdk-headless.i686 : OpenJDK Headless Runtime Environment 8java-1.8.0-openjdk-headless.x86_64 : OpenJDK Headless Runtime Environment 8java-1.8.0-openjdk-headless-debug.i686 : OpenJDK Runtime Environment with fulljava-1.8.0-openjdk-headless-debug.x86_64 : OpenJDK Runtime Environment with fulljava-1.8.0-openjdk-javadoc.noarch : OpenJDK 8 API documentationjava-1.8.0-openjdk-javadoc-debug.noarch : OpenJDK 8 API documentation forjava-1.8.0-openjdk-javadoc-zip.noarch : OpenJDK 8 API documentation compressedjava-1.8.0-openjdk-javadoc-zip-debug.noarch : OpenJDK 8 API documentationjava-1.8.0-openjdk-src.i686 : OpenJDK Source Bundle 8java-1.8.0-openjdk-src.x86_64 : OpenJDK Source Bundle 8java-1.8.0-openjdk-src-debug.i686 : OpenJDK Source Bundle 8 for packages withjava-1.8.0-openjdk-src-debug.x86_64 : OpenJDK Source Bundle 8 for packages with#安装下载jdk1.8，下载之后默认的目录为： /usr/lib/jvm/yum install java-1.8.0-openjdk#验证码java -version 2、Ubuntu安装JDK A、方式一123456789#搜索可用jdk列表sudo apt search openjdk-8#安装jdksudo apt-get install openjdk-8-jdk#验证码java -version B、方式二（压缩包）123456789101112131415161718#需要提前下载好jdk-8u251-linux-x64.tar.gztar -zvxf jdk-8u251-linux-x64.tar.gz#配置环境变量sudo vi /etc/profile#将一下配置添加到文件末尾（注意JAVA_HOME的位置）#javaexport JAVA_HOME=/usr/java/jdk1.8.0_181export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib#重新加载配置source /etc/profile#验证码java -version"},{"title":"Docker日志清理","path":"/wiki/docker/Docker日志清理.html","content":"1sudo yum update"},{"title":"Docker入门","path":"/wiki/docker/Docker入门.html","content":"1、Docker简介1.1 什么是虚拟化 在计算机中，虚拟化（英语：Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以比原本的组态更好的方式来应用这些资源。这些资源的新虚拟部份是不受现有资源的架设方式，地域或物理组态所限制。一般所指的虚拟化资源包括计算能力和资料存储。 在实际的生产环境中，虚拟化技术主要用来解决高性能的物理硬件产能过剩和老的旧的硬件产能过低的重组重用，透明化底层物理硬件，从而最大化的利用物理硬件对资源充分利用虚拟化技术种类很多，例如：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化(vip)、桌面虚拟化、服务虚拟化、虚拟机等等。 1.2 什么是DockerDocker 是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业余项目。它基于 Google 公司推出的 Go 语言实现。 项目后来加入了 Linux 基金会，遵从了 Apache 2.0 协议，项目代码在 [GitHub](https://github.com/docker/docker) 上进行维护。 &#123;% image https://cdn.nlark.com/yuque/0/2019/png/672800/1576460023486-a6696364-7f30-4e87-a3f4-f520fe6bb40c.png#align=left&display=inline&height=186&originHeight=186&originWidth=555&size=58821&status=done&style=none&width=555 %&#125; Docker 自开源后受到广泛的关注和讨论，以至于 dotCloud 公司后来都改名为 Docker Inc。Redhat 已经在其 RHEL6.5 中集中支持 Docker；Google 也在其 PaaS 产品中广泛应用。 Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。 在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。 为什么选择Docker? （1）上手快。用户只需要几分钟，就可以把自己的程序“Docker化”。Docker依赖于“写时复制”（copy-on-write）模型，使修改应用程序也非常迅速，可以说达到“随心所致，代码即改”的境界。随后，就可以创建容器来运行应用程序了。大多数Docker容器只需要不到1秒中即可启动。由于去除了管理程序的开销，Docker容器拥有很高的性能，同时同一台宿主机中也可以运行更多的容器，使用户尽可能的充分利用系统资源。 （2）职责的逻辑分类使用Docker，开发人员只需要关心容器中运行的应用程序，而运维人员只需要关心如何管理容器。Docker设计的目的就是要加强开发人员写代码的开发环境与应用程序要部署的生产环境一致性。从而降低那种“开发时一切正常，肯定是运维的问题（测试环境都是正常的，上线后出了问题就归结为肯定是运维的问题）” （3）快速高效的开发生命周期Docker的目标之一就是缩短代码从开发、测试到部署、上线运行的周期，让你的应用程序具备可移植性，易于构建，并易于协作。（通俗一点说，Docker就像一个盒子，里面可以装很多物件，如果需要这些物件的可以直接将该大盒子拿走，而不需要从该盒子中一件件的取。） （4）鼓励使用面向服务的架构Docker还鼓励面向服务的体系结构和微服务架构。Docker推荐单个容器只运行一个应用程序或进程，这样就形成了一个分布式的应用程序模型，在这种模型下，应用程序或者服务都可以表示为一系列内部互联的容器，从而使分布式部署应用程序，扩展或调试应用程序都变得非常简单，同时也提高了程序的内省性。（当然，可以在一个容器中运行多个应用程序） 1.3 容器与虚拟机比较下面的图片比较了 Docker 和传统虚拟化方式的不同之处，可见容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层面实现。 与传统的虚拟机相比，Docker优势体现为启动速度快、占用体积小。 1.4 Docker 组件1.4.1 Docker服务器与客户端Docker是一个客户端-服务器（C/S）架构程序。Docker客户端只需要向Docker服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具Docker以及一整套RESTful API。你可以在同一台宿主机上运行Docker守护进程和客户端，也可以从本地的Docker客户端连接到运行在另一台宿主机上的远程Docker守护进程。 1.4.2 Docker镜像与容器镜像是构建Docker的基石。用户基于镜像来运行自己的容器。镜像也是Docker生命周期中的“构建”部分。镜像是基于联合文件系统的一种层式结构，由一系列指令一步一步构建出来。例如： 添加一个文件；执行一个命令；打开一个窗口。也可以将镜像当作容器的“源代码”。镜像体积很小，非常“便携”，易于分享、存储和更新。Docker可以帮助你构建和部署容器，你只需要把自己的应用程序或者服务打包放进容器即可。容器是基于镜像启动起来的，容器中可以运行一个或多个进程。我们可以认为，镜像是Docker生命周期中的构建或者打包阶段，而容器则是启动或者执行阶段。容器基于镜像启动，一旦容器启动完成后，我们就可以登录到容器中安装自己需要的软件或者服务。所以Docker容器就是：一个镜像格式；一些列标准操作；一个执行环境。Docker借鉴了标准集装箱的概念。标准集装箱将货物运往世界各地，Docker将这个模型运用到自己的设计中，唯一不同的是：集装箱运输货物，而Docker运输软件。和集装箱一样，Docker在执行上述操作时，并不关心容器中到底装了什么，它不管是web服务器，还是数据库，或者是应用程序服务器什么的。所有的容器都按照相同的方式将内容“装载”进去。Docker也不关心你要把容器运到何方：我们可以在自己的笔记本中构建容器，上传到Registry，然后下载到一个物理的或者虚拟的服务器来测试，在把容器部署到具体的主机中。像标准集装箱一样，Docker容器方便替换，可以叠加，易于分发，并且尽量通用。 1.4.3 Registry（注册中心）Docker用Registry来保存用户构建的镜像。Registry分为公共和私有两种。Docker公司运营公共的Registry叫做Docker Hub。用户可以在Docker Hub注册账号，分享并保存自己的镜像（说明：在Docker Hub下载镜像巨慢，可以自己构建私有的Registry）。 [https://hub.docker.com/](https://hub.docker.com/) 2 、Docker安装 Docker官方建议在Ubuntu中安装，因为Docker是基于Ubuntu发布的，而且一般Docker出现的问题Ubuntu是最先更新或者打补丁的。在很多版本的CentOS中是不支持更新最新的一些补丁包的。 注：如果安装过则可以，/var/lib/docker/保留包括图像，容器，卷和网络在内的内容。 2.1、CentOS安装 Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。Docker 运行在 CentOS-6.5 或更高的版本的 CentOS 上，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本。 2.1.1、检测版本12345678910111213141516#检测Linux版本 命令：uname -runame -r3.10.0-693.2.2.el7.x86_64yum 包更新到最新sudo yum update#安装系统依赖#需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的sudo yum install -y yum-utils device-mapper-persistent-data lvm2#设置yum源为阿里云 --添加软件源信息sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo#更新yum缓存sudo yum makecache fast 2.1.2、查看所有docker版本12#查看所有docker版本#yum list docker-ce --showduplicates | sort -r 2.1.3、安装docker123#安装Docker-cesudo yum -y install docker-ce 2.1.4、启动服务并设置开机启动12345#启动 Docker 后台服务sudo systemctl start docker#设置开机启动sudo systemctl enable docker 2.1.4、安装后查看docker版本1234567891011121314151617181920212223#安装检测 当提示安装的版本号就已经标示安装完成docker --versionDocker version 18.09.6, build 481bc77156#或docker versionClient: Version: 18.09.6 API version: 1.39 Go version: go1.10.8 Git commit: 481bc77156 Built: Sat May 4 02:34:58 2019 OS/Arch: linux/amd64 Experimental: falseServer: Docker Engine - Community Engine: Version: 18.09.6 API version: 1.39 (minimum version 1.12) Go version: go1.10.8 Git commit: 481bc77 Built: Sat May 4 02:02:43 2019 OS/Arch: linux/amd64 Experimental: false 2.2、Ubuntu安装2.2.1、使用apt-get命令安装1sudo apt-get install docker.io -y 2.2.2、查看Docker版本1sudo docker -v 2.2.3、查看Docker的信息1sudo docker info 2.2.4、查看帮助文档1sudo docker --help 2.3、Windows安装 Windows中安装需要注意，Windows版本不同安装包会有所不同,如有需要请自行百度。 扩展：卸载Docker-CE12sudo yum remove docker-cesudo rm -rf /var/lib/docker 移除旧版本Docker12345678910sudo yum remove docker \\docker-client \\docker-client-latest \\docker-common \\docker-latest \\docker-latest-logrotate \\docker-logrotate \\docker-selinux \\docker-engine-selinux \\docker-engine 3、Docker启动服务 这里主要介绍Linux版的Docker服务启动与关闭，如需Windows的请询问度娘，个人认为Windows版Docker还是很少装。本人也体验过Windows版从安装到使用都没用Linux版的好用。注：systemctl命令是系统服务管理器指令，它是 service 和 chkconfig 两个命令组合 3.1、Docker服务的启动1systemctl start docker 3.2、Docker服务的停止1systemctl stop docker 3.3、Docker服务的重启1systemctl restart docker 3.4、查看Docker服务状态1systemctl status docker 3.5、设置Docker开机启动1systemctl enable docker 3.6、开放Docker的2375端口12345678910111213141516171819#编辑docker文件sudo vim /lib/systemd/system/docker.service#找到ExecStart=/usr/bin/dockerd#在ExecStart=/usr/bin/dockerd后追加 -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sockExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock#加载Docker守护线程systemctl daemon-reload#重启Dockersystemctl restart docker#查看端口 netstat -tnlp |grep 2375 #进行2375端口（或浏览器访问http://ip:2375/info） curl 127.0.0.1:2375/info 4、配置镜像加速器 鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决.新版的 Docker 使用 &#x2F;etc&#x2F;docker&#x2F;daemon.json（Linux）%programdata%\\docker\\config\\daemon.json（Windows） 来配置 Daemon。 请在该配置文件中加入（没有该文件的话，请先建一个）： 4.1、阿里云镜像加速 针对Docker客户端版本大于 1.10.0 的用户您可以通过修改daemon配置文件&gt; &#x2F;etc&#x2F;docker&#x2F;daemon.json来使用加速器 12345678910#创建目录sudo mkdir -p /etc/docker# 追加配置sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123; &quot;registry-mirrors&quot;: [&quot;https://ortbpk0j.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker 4.2、腾讯云镜像加速4.3、163镜像加速1234567sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123; &quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker 4.4、ustc镜像加速 ustc是老牌的linux镜像服务提供者了，还在遥远的ubuntu 5.04版本的时候就在用。ustc的docker镜像加速器速度很快。ustc dockermirror的优势之一就是不需要注册，是真正的公共服务。https://lug.ustc.edu.cn/wiki/mirrors/help/docker 1234567sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123; &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker 5 常用命令5.1 镜像相关命令 什么是Docker镜像 Docker镜像是由文件系统叠加而成（是一种文件的存储形式）。最底端是一个文件引导系统，即bootfs，这很像典型的Linux/Unix的引导文件系统。Docker用户几乎永远不会和引导系统有什么交互。实际上，当一个容器启动后，它将会被移动到内存中，而引导文件系统则会被卸载，以留出更多的内存供磁盘镜像使用。Docker容器启动是需要的一些文件，而这些文件就可以称为Docker镜像。 5.1.1 查看镜像1234567#查看镜像docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEnacos/nacos-server latest 00b7582cb6e6 5 days ago 724MBgrafana/grafana latest 322e0a666176 11 days ago 233MBgitlab/gitlab-ce latest e6b464b98aff 12 days ago 1.92GB 返回描述： REPOSITORY TAG IMAGE ID CREATED SIZE 镜像名称 镜像标签 镜像ID 镜像的创建日期（不是获取该镜像的日期 镜像大小 注意：这些镜像都是存储在Docker宿主机的&#x2F;var&#x2F;lib&#x2F;docker目录下 5.1.2 搜索镜像如果你需要从网络中查找需要的镜像，可以通过以下命令搜索 123456789#docker search 镜像名称[root@gitlab ~]# docker search mysqlNAME DESCRIPTION STARS OFFICIAL AUTOMATEDmysql MySQL is a widely used, open-source relation… 9634 [OK] mariadb MariaDB is a community-developed fork of MyS… 3500 [OK] mysql/mysql-server Optimized MySQL Server Docker images. Create… 702 [OK]centos/mysql-57-centos7 MySQL 5.7 SQL database server 77 mysql/mysql-cluster Experimental MySQL Cluster Docker images. Cr… 69 NAME DESCRIPTION STARS OFFICIAL AUTOMATED 仓库名称 镜像描述 用户评价，反应一个镜像的受欢迎程度 是否官方 自动构建，表示该镜像由Docker Hub自动构建流程创建的 5.1.3 拉取镜像拉取镜像就是从中央仓库中下载镜像到本地 1#docker pull 镜像名称 例如，我要下载centos7镜像 12345sudo docker pull centos:7#默认latestsudo docker pull mysql#指定版本sudo docker pull mysql:5.7 5.1.4 删除镜像按镜像ID删除镜像 1234#docker rmi 镜像ID# 删除指定镜像sudo docker rmi $IMAGES_IDsudo docker rmi $REPOSITORY:$TAG 删除所有镜像 12# 删除所有镜像sudo docker rmi `sudo docker images -q` 5.1.5、容器保存镜像1sudo docker commit -a &quot;Yongzheng&quot; -m &quot;Ubuntu:16&quot; 4968e97f588d ubuntu:16.6 5.1.6、镜像备份12# sudo docker save -o 宿主机目录/镜像名.tar $IMAGES_ID/$REPOSITORY:$TAGsudo docker save -o nginx.tar nginx 5.1.7、镜像恢复12# sudo docker load -i 宿主机目录/镜像名.tarsudo docker load -i nginx.tar 5.1.8、Dockerfile创建镜像 根据Dockerfile创建 编写好Dockerfile文件，在同级目录下执行shell语句。 注： Dockerfile的编写请参考官网 1234#server:v1.0 server为镜像名字 v1.0为TAG（标签） # . 代表DockerFile 与当前目录为同级目录sudo docker build -t server:v1.0 . sudo docker build -t registry.cn-hangzhou.aliyuncs.com/yongzheng/jenkins:lts 5.2 容器相关命令5.2.1 查看容器A。查看正在运行的容器 1234567[root@gitlab ~]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESdb71526cf08c seataio/seata-server:1.0.0 &quot;java -Djava.securit…&quot; 4 days ago Up 4 days 0.0.0.0:8091-&gt;8091/tcp seata-server8cbfdf71a92b nacos/nacos-server &quot;bin/docker-startup.…&quot; 12 days ago Up 12 days 0.0.0.0:8848-&gt;8848/tcp nacos900c164303b4 zookeeper &quot;/docker-entrypoint.…&quot; 6 weeks ago Up 2 weeks 2888/tcp, 3888/tcp, 8080/tcp, 0.0.0.0:2182-&gt;2181/tcp zookeeper-yz15f401418436 gitlab/gitlab-ce:latest &quot;/assets/wrapper&quot; 7 weeks ago Up 2 weeks (healthy) 0.0.0.0:2222-&gt;22/tcp, 0.0.0.0:8800-&gt;80/tcp, 0.0.0.0:8443-&gt;443/tcp gitlab-ce 结果描述: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 容器id 元镜像 创建时间 运行状态 端口映射 容器名 B、查看所有容器 1docker ps –a C、查看最后一次运行的容器 1docker ps –l D、查看停止的容器 1docker ps -f status=exited 5.2.2 创建与启动容器 创建容器常用的参数说明：docker run 参数 描述 –name 容器命名 -t 表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端 -d 守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器） -v 表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录)。可以设置多个 注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。如果出现目录没有权限问题，加上--privileged=true -p 端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射 注意：-v ：如果你共享的是多级的目录，可能会出现权限不足的提示。这是因为CentOS7中的安全模块selinux把权限禁掉了，我们需要添加参数–privileged&#x3D;true 来解决挂载的目录没有权限的问题。 12docker run -di --privileged=true --name=mycentos3 \\-v /usr/local/myhtml:/usr/local/myhtml centos:7 A、交互式运行 1234docker run -it --name=容器名称 镜像名称:标签docker run -it ubuntu /bin/bash#注：退出交互式运行（退出时容器停止） exit 注意：交互式运行退出，容器则停止。 B、守护式方式创建容器： 123docker run -id --name=容器名称 镜像名称:标签docker run -id ubuntu /bin/bash 注：运行一个需要长时间运行的容器，也可以理解为后台运行C、登录守护式容器方式： 1docker exec -it 容器名称 (或者容器ID) /bin/bash 5.2.3 启动与停止容器A、启动容器：12docker start 容器名称（或者容器ID）docker start $CONTAINER_ID/$NAME B、重启容器1docker restart $CONTAINER_ID/$NAME B、停止容器：1234567#立即终止docker stop 容器名称（或者容器ID）docker stop $CONTAINER_ID/$NAME#延时终止（秒）docker stop -t 20 容器名称（或者容器ID）docker stop -t 20 $CONTAINER_ID/$NAME C、删除容器12docker rm 容器名称（或者容器ID）docker rm $CONTAINER_ID/$NAME 扩展： 1234sudo docker rm -f $CONTAINER_ID/$NAME -f： --force=false 强制终止并删除一个运行中的容器 -l： --link=false 删除容器的连接，但保留容器 -v： --volumes=false删除容器所挂载的数据卷 D、查看容器 查看容器运行的各种参数 1sudo docker inspect $CONTAINER_ID/$NAME 查询容器的IP 1sudo docker inspect --format &#x27;&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;&#x27; $CONTAINER_ID/$NAME E、容器的导入导出 导出容器 1docker export 4968e97f588d -ubuntu.tar 导入容器 1ubuntu.tar | sudo docker import - yongzheng/ubuntu:v1.0 F、进入容器 attach命令 1sudo docker attach $CONTAINER_ID/$NAME exec命令 1sudo docker exec -it $CONTAINER_ID/$NAME /bin/bash 5.3、文件拷贝5.3.1、将文件拷贝到容器 如果我们需要将文件拷贝到容器内可以使用cp命令 123docker cp 需要拷贝的文件或目录 容器名称:容器文件或目录docker cp nginx.conf $CONTAINER_ID/$NAME:/etc/nginx/nginx.conf 5.3.2、从容器拷贝到宿主机 也可以将文件从容器内拷贝出来 123docker cp 容器名称:容器文件或目录 需要拷贝的文件或目录docker cp $CONTAINER_ID/$NAME:/etc/nginx/nginx.conf nginx.conf 6、Dockerfile6.1、 什么是Dockerfile Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像。 1、对于开发人员：可以为开发团队提供一个完全一致的开发环境； &gt; 2、对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了；3、对于运维人员：在部署时，可以实现应用的无缝移植。 6.2 常用命令 命令 作用 FROM imgs&#x2F;docker_name:tag 定义了使用哪个基础镜像启动构建流程 MAINTAINER user_name 声明镜像的创建者 ENV key value 设置环境变量 (可以写多条) RUN command 是Dockerfile的核心部分(可以写多条) ADD source_dir&#x2F;file dest_dir&#x2F;file 将宿主机的文件复制到容器内，如果是一个压缩文件，将会在复制后自动解压 COPY source_dir&#x2F;file dest_dir&#x2F;file 和ADD相似，但是如果有压缩文件并不能解压 WORKDIR path_dir 设置工作目录 6.3 使用脚本创建镜像步骤： 6.3.1、创建目录1mkdir –p /usr/local/dockerjdk8 6.3.2、下载jdk-8u171-linux-x64.tar.gz并上传到服务器（虚拟机）中的&#x2F;usr&#x2F;local&#x2F;dockerjdk8目录6.3.3、创建文件Dockerfile vi Dockerfile1234567891011121314#依赖镜像名称和IDFROM centos:7#指定镜像创建者信息MAINTAINER ITCAST#切换工作目录WORKDIR /usrRUN mkdir /usr/local/java#ADD 是相对路径jar,把java添加到容器中ADD jdk-8u171-linux-x64.tar.gz /usr/local/java/#配置java环境变量ENV JAVA_HOME /usr/local/java/jdk1.8.0_171ENV JRE_HOME $JAVA_HOME/jreENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATHENV PATH $JAVA_HOME/bin:$PATH 6.3.4、执行命令构建镜像1docker build -t=&#x27;jdk1.8&#x27; . 注意后边的空格和点，不要省略 6.3.5、查看镜像是否建立完成1docker images 7 Docker私有仓库7.1 私有仓库搭建与配置7.1.1、拉取私有仓库镜像（此步省略）1docker pull registry 7.1.2、启动私有仓库容器1docker run -di --name=registry -p 5000:5000 registry 7.1.3、打开浏览器 输入地址http://192.168.184.141:5000/v2/_catalog看到&#123;&quot;repositories&quot;:[]&#125; 表示私有仓库搭建成功并且内容为空7.1.4、修改daemon.json1vi /etc/docker/daemon.json 添加以下内容，保存退出。 1&#123;&quot;insecure-registries&quot;:[&quot;192.168.184.141:5000&quot;]&#125; 此步用于让 docker信任私有仓库地址 7.1.5、重启docker 服务1systemctl restart docker 7.2 镜像上传至私有仓库7.2.1、标记此镜像为私有仓库的镜像1docker tag jdk1.8 192.168.184.141:5000/jdk1.8 7.2.2、再次启动私服容器1docker start registry 7.2.3、上传标记的镜像1docker push 192.168.184.141:5000/jdk1.8"},{"title":"关于","path":"/about/index.html","content":"关于我我是一个在命运长河里挣扎的小鱼，90后，目前是小白一枚。虽然心中不甘，但是目前确实是 Worst One 。目标是成为全栈工程师、系统架构师。虽然前路迷茫，但是我会一步一步往前走。 关于主题Hexo - LiveForCode 主题是根据 BNDong的博客样式复制过来的，其中也借鉴了 Hexo - NexT主题的样式。可能这个主题还有很多不尽人意的地方，在后续的阶段我会不断地完善，如果有关于主题的相关问题，欢迎联系我。"},{"title":"Linux安装JDK","path":"/wiki/ruoyi-vue-plus/Linux安装JDK.html","content":"1、CentOS安装JDK jdk1.8下载地址：https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html jdk11下载地址：https://www.oracle.com/java/technologies/javase-jdk11-downloads.html jdk14下载地址：https://www.oracle.com/java/technologies/javase-jdk14-downloads.html A、方式一（rpm方式）12345678910#需要提前下载好rpm包#安装之前检测jdk是否安装rpm -qa | grep java#执行安装rpm -ivh jdk-8u251-linux-x64.rpm #检测jdk版本java -version B、方式二（压缩包）1234567891011121314151617181920212223242526272829303132333435363738394041#需要提前下载好jdk-8u251-linux-x64.tar.gztar -zvxf jdk-8u251-linux-x64.tar.gz#配置环境变量sudo vi /etc/profile#将一下配置添加到文件末尾（注意JAVA_HOME的位置）#javaexport JAVA_HOME=/usr/java/jdk1.8.0_181export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/libsudo tee /etc/profile &lt;&lt;-&#x27;EOF&#x27;export JAVA_HOME=/home/yongzheng/application/jdk/jdk1.8.0_301export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/libexport M2_HOME=/home/yongzheng/application/mavenexport PATH=$PATH:$M2_HOME/binEOF#重新加载配置source /etc/profile#验证码java -version#MACsudo tee ~/.bash_profile &lt;&lt;-&#x27;EOF&#x27;export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_333.jdk/Contents/Homeexport M2_HOME=/Library/Java/Maven/apache-maven-3.8.6export GRADLE_HOME=/Library/Java/Gradle/gradle-7.4.2export GRADLE_USER_HOME=/Library/Java/Repositoryexport PATH=$JAVA_HOME/bin:$M2_HOME/bin:$GRADLE_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/libEOF C、方式三（yum）123456789101112131415161718192021222324252627282930313233343536373839404142#搜索jdk安装包yum search java|grep jdk#搜索jdk 1.8.0版本yum search java|grep jdk | grep 1.8.0Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fastjava-1.8.0-openjdk.i686 : OpenJDK Runtime Environment 8java-1.8.0-openjdk.x86_64 : OpenJDK Runtime Environment 8java-1.8.0-openjdk-accessibility.i686 : OpenJDK accessibility connectorjava-1.8.0-openjdk-accessibility.x86_64 : OpenJDK accessibility connectorjava-1.8.0-openjdk-accessibility-debug.i686 : OpenJDK 8 accessibility connectorjava-1.8.0-openjdk-accessibility-debug.x86_64 : OpenJDK 8 accessibilityjava-1.8.0-openjdk-debug.i686 : OpenJDK Runtime Environment 8 with full debug onjava-1.8.0-openjdk-debug.x86_64 : OpenJDK Runtime Environment 8 with full debugjava-1.8.0-openjdk-demo.i686 : OpenJDK Demos 8java-1.8.0-openjdk-demo.x86_64 : OpenJDK Demos 8java-1.8.0-openjdk-demo-debug.i686 : OpenJDK Demos 8 with full debug onjava-1.8.0-openjdk-demo-debug.x86_64 : OpenJDK Demos 8 with full debug onjava-1.8.0-openjdk-devel.i686 : OpenJDK Development Environment 8java-1.8.0-openjdk-devel.x86_64 : OpenJDK Development Environment 8java-1.8.0-openjdk-devel-debug.i686 : OpenJDK Development Environment 8 withjava-1.8.0-openjdk-devel-debug.x86_64 : OpenJDK Development Environment 8 withjava-1.8.0-openjdk-headless.i686 : OpenJDK Headless Runtime Environment 8java-1.8.0-openjdk-headless.x86_64 : OpenJDK Headless Runtime Environment 8java-1.8.0-openjdk-headless-debug.i686 : OpenJDK Runtime Environment with fulljava-1.8.0-openjdk-headless-debug.x86_64 : OpenJDK Runtime Environment with fulljava-1.8.0-openjdk-javadoc.noarch : OpenJDK 8 API documentationjava-1.8.0-openjdk-javadoc-debug.noarch : OpenJDK 8 API documentation forjava-1.8.0-openjdk-javadoc-zip.noarch : OpenJDK 8 API documentation compressedjava-1.8.0-openjdk-javadoc-zip-debug.noarch : OpenJDK 8 API documentationjava-1.8.0-openjdk-src.i686 : OpenJDK Source Bundle 8java-1.8.0-openjdk-src.x86_64 : OpenJDK Source Bundle 8java-1.8.0-openjdk-src-debug.i686 : OpenJDK Source Bundle 8 for packages withjava-1.8.0-openjdk-src-debug.x86_64 : OpenJDK Source Bundle 8 for packages with#安装下载jdk1.8，下载之后默认的目录为： /usr/lib/jvm/yum install java-1.8.0-openjdk#验证码java -version 2、Ubuntu安装JDK A、方式一123456789#搜索可用jdk列表sudo apt search openjdk-8#安装jdksudo apt-get install openjdk-8-jdk#验证码java -version B、方式二（压缩包）123456789101112131415161718#需要提前下载好jdk-8u251-linux-x64.tar.gztar -zvxf jdk-8u251-linux-x64.tar.gz#配置环境变量sudo vi /etc/profile#将一下配置添加到文件末尾（注意JAVA_HOME的位置）#javaexport JAVA_HOME=/usr/java/jdk1.8.0_181export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib#重新加载配置source /etc/profile#验证码java -version"},{"title":"Linux工具安装","path":"/wiki/ruoyi-vue-plus/Linux工具安装.html","content":"1、lrzsz工具（上传下载）123456789#Ubuntu下载安装包sudo apt-get install -y lrzsz#CentOS下载安装包yum install -y lrzsz#上传文件rz#下载文件sz 文件名 2、sftp工具（上传下载）1234567891011121314151617181920212223#Xshell的sftp工具#查看服务器的位置pwd#查看本机的位置lpwd#固定本机的位置lcd#上传文件 或直接put 使用文件弹出框上传#将本机lcd默认路径下的abc.txt 上传到服务器现在的位置put abc.txt#上传多个文件mput *.txt#下载文件#将服务器现在位置的abc.txt文件，下载到lcd默认的本机的位置get abc.txt #下载多个mget *.txt 3、openssh-server工具（ssh远程）1234567# Xshell无法SSH连接Ubuntu #下载ssh服务sudo apt-get install openssh-server# 查看Ubuntu是否开启22端口netstat -ntlp | grep 22#检测端口是否开启telnet 192.168.3.244 22 4、sshpass工具（ssh远程）123456789101112131415161718192021222324252627282930313233343536373839404142# 安装软件包sudo apt-get install sshpass# 直接远程Linux主机# sshpass -p password ssh -p port username@IP 默认22端口sshpass -p xxx ssh root@192.168.11.11#从密码文件读取文件内容作为密码去远程连接主机sshpass -f xxx.txt ssh root@192.168.11.11#从远程主机上拉取文件到本地sshpass -p &#123;密码&#125; scp &#123;用户名&#125;@&#123;主机IP&#125;:$&#123;远程主机目录&#125; $&#123;本地主机目录&#125;#将主机目录文件拷贝至远程主机目录sshpass -p &#123;密码&#125; scp $&#123;本地主机目录&#125; &#123;用户名&#125;@&#123;主机IP&#125;:$&#123;远程主机目录&#125; #远程执行命令sshpass -p password ssh username@host &lt;cmd&gt;sshpass：用于非交互的ssh 密码验证使用 -p 参数指定明文密码，然后直接登录远程服务器。 它支持密码从命令行,文件,环境变量中读取1、从命令行方式传递密码sshpass -p user_password ssh user_name@192.168.1.2 【登录远程机器】sshpass -p user_password scp -P22 root@192.168.1.2:/home/test ./ 【远程机器/home/test 复制到本机当前目录】还可以加参数 -q 【去掉进度显示】2、从文件读取密码echo &quot;user_password&quot; &gt; user.passwdsshpass -f user.passwd ssh user_name@192.168.1.23、从环境变量获取密码export SSHPASS=&quot;user_password&quot;sshpass -e ssh user_name@192.168.1.2 4、sshpass -p user_password ssh -o StrictHostKeyChecking=no user_name@192.168.1.2 【-o StrictHostKeyChecking=no 表示远程连接时不提示是否输入yes/no】5、使用sshpass远程免密，在远程主机上执行shell命令，如下远程执行命令：touch /opt/file.txtsshpass -p user_password ssh -o StrictHostKeyChecking=no user_name@192.168.1.2 touch /opt/file.txt[注：shell命令要和sshpass命令写在一行] 5、ufw防火墙12345678910111213141516171819202122232425#安装防火墙sudo apt-get install ufw#防火墙开启sudo ufw enable#防火墙重启sudo ufw reload#关闭防火墙sudo ufw disable#开放22端口sudo ufw allow 22#禁用22端口sudo ufw delete allow 22#查看端口开启状态sudo ufw status#允许此IP访问所有的本机端口sudo ufw allow from 192.168.3.135#禁止外部访问SMTP服务sudo ufw deny smtp#删除上面建立的某条规则sudo ufw delete allow smtp #推荐使用sudo apt-get install ufwsudo ufw enablesudo ufw default deny 6.定时任务 12345678910111213141516171819202122232425#安装定时工具yum install cronie#启动服务service crond start #重启服务service crond restart #关闭服务service crond stop #重新加载服务service crond reload #查看状态service crond status 0 0 6 * * ? true &gt; /var/log/nginx/access.log0 0 6 * * ? true &gt; /var/log/nginx/error.log:wq #保存# 编辑定时命令 出发vim编辑器crontab -e#查看当前所有定时任务crontab -l#删除当前所有定时任务crontab -r"}]